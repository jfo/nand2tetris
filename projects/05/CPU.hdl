// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM=0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time unit. If reset=1 then the
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:


    And(a=instruction[15], b=true, out=cinstruction);
    Not(in=cinstruction, out=ainstruction);
    Or(a=ainstruction, b=writeA, out=loadA);

    Or(a=AMswitch, b=cinstruction, out=asource);
    Mux16(a=instruction, b=ALUout, sel=asource, out=toa);
    ARegister(in=toa, load=loadA, out=froma, out[0..14]=topc, out[0..14]=addressM);

    Mux16(a=froma, b=inM, sel=AMswitch, out=fromam);

    ALU(x=fromd, y=fromam,
                 zx=zx,
                 nx=nx,
                 zy=zy,
                 ny=ny,
                 f=f,
                 no=no,
        zr=zr, ng=ng, out=ALUout, out=outM, out[15]=negq );

    DRegister(in=ALUout, load=writeD ,out=fromd);

    PC(in=froma, reset=reset, load=pcload, inc=true, out[0..14]=pc);

    And(a=instruction[12], b=cinstruction, out=AMswitch);

    And(a=instruction[11], b=cinstruction, out=zx);
    And(a=instruction[10], b=cinstruction, out=nx);
    And(a=instruction[9], b=cinstruction, out=zy);
    And(a=instruction[8], b=cinstruction, out=ny);
    And(a=instruction[7], b=cinstruction, out=f);
    And(a=instruction[6], b=cinstruction, out=no);

    And(a=instruction[5], b=cinstruction, out=writeA);
    And(a=instruction[4], b=cinstruction, out=writeD);
    And(a=instruction[3], b=cinstruction, out=writeM);

    And(a=instruction[2], b=cinstruction, out=JLT);
    And(a=instruction[1], b=cinstruction, out=JEQ);
    And(a=instruction[0], b=cinstruction, out=JGT);


    And(a=negq, b=true, out=lessthanzero);

    Or16Way(in=ALUout, out=exists);
    Not(in=negq, out=notneg);
    And(a=exists, b=notneg, out=greaterthanzero);

    Not(in=exists, out=doesntexist);
    And(a=doesntexist, b=true, out=equaltozero);

    And(a=JGT, b=greaterthanzero, out=jmpJGT);
    And(a=JEQ, b=equaltozero, out=jmpJEQ);
    And(a=JLT, b=lessthanzero, out=jmpJLT);

    Or(a=jmpJGT, b=jmpJEQ, out=midjump);
    Or(a=midjump, b=jmpJLT, out=pcload);
}
